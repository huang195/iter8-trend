dist: xenial

language: minimal

stages:
  - "unit tests"
  - "end-to-end tests"
  - "build image"

env:
  global:
    - MINIKUBE_VERSION=v1.8.1
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config

# Define yaml anchor to be reused across testing matrix
_end_to_end_script: &end_to_end_script
  sudo: required
  before_script:
    # Download kubectl
    - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$KUBE_VERSION/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    # Download minikube
    - curl -Lo minikube https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
    # Create kube and minikube configuration directories
    - mkdir -p $HOME/.kube $HOME/.minikube
    - touch $KUBECONFIG
    - sudo minikube start --profile=minikube --vm-driver=none --kubernetes-version=$KUBE_VERSION
    - minikube update-context --profile=minikube
    - "sudo chown -R travis: /home/travis/.minikube/"
    - eval "$(minikube docker-env --profile=minikube)" && export DOCKER_CLI='docker'
  script: 
    - kubectl cluster-info
    - test/test.sh

jobs:
  include:
    - stage: "unit tests"
      language: python
      python:
        - "3.7"
      install:
        - pip install -r requirements.txt
      script:
        - make test
    - stage: "end-to-end tests"
      env: KUBE_VERSION=v1.15.10 ISTIO_VERSION=1.4.3
      <<: *end_to_end_script
    - env: KUBE_VERSION=v1.15.10 ISTIO_VERSION=1.4.6
      <<: *end_to_end_script
    - env: KUBE_VERSION=v1.16.0 ISTIO_VERSION=1.4.3
      <<: *end_to_end_script
    - env: KUBE_VERSION=v1.16.0 ISTIO_VERSION=1.4.6
      <<: *end_to_end_script
    - stage: "build image"
      script:
        - if [ "$TRAVIS_BRANCH" == "master" ]; then
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin;
            if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
              export IMG="iter8/iter8-trend:$TRAVIS_BUILD_NUMBER-PR_$TRAVIS_PULL_REQUEST";
              echo "Building PR Docker image = $IMG";
              make docker-build;
              make docker-push;
            else
              export IMG="iter8/iter8-trend:$TRAVIS_BUILD_NUMBER-$TRAVIS_COMMIT";
              echo "Building PR Docker image = $IMG";
              make docker-build;
              make docker-push;
              LATEST="iter8/iter8-trend:latest";
              docker tag $IMG $LATEST;
              export IMG=$LATEST;
              make docker-push;
            fi
          fi
